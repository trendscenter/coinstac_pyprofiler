#!/usr/bin/python

from coinstac_pyprofiler import custom_profile_merger as pm
from coinstac_pyprofiler import custom_profiler as cprof
from coinstac_pyprofiler import visualizer as vz


def counter(count=100):
    """
    A test method used for profiling which computes the sum of natural numbers
    """
    for x in range(count):
        num = 10000
        sum = 0
        while num > 0:
            sum += num
            num -= 1


@cprof.profile(type="pyinstrument", output_file_prefix="./output/local0/simulatorRun/profile_log/exp1_profiler")
def test1(count=100):
    counter(count)

    return -10


def test2(count=100):
    counter(count)

    return -10


def repeat_experiment1(count):
    for num in range(count):
        test1(5)


def repeat_experiment2(count):
    for num in range(count):
        profile = cprof.Profile(type='pyinstrument',
                                output_file_prefix="./output/local1/simulatorRun/profile_log/exp2_profiler")
        profile.start()
        test2()
        profile.stop()
        profile.persist_log()


def merge_exp1_exp2_results():
    """
    merges the json files generated by exp1 (in local0) and exp2 (in local1)
    """

    simulator_test_dir = './'
    json_folder = 'profile_log'
    pm.merge_json_computation(simulator_test_dir, 2, json_folder, "./output/", "log", save_format="html|json",
                              has_remote=False)


def visualize_exp1_exp2_results():
    """
    Generates an image of the merged profiled results in a tree format.
    """
    results_dir = "./output/"
    vz.visualize_json(results_dir + "log_local0_merged.json", results_dir + "log_local0_merged")
    vz.visualize_json(results_dir + "log_local1_merged.json", results_dir + "log_local1_merged")


if __name__ == "__main__":
    # repeat_experiment1(5)
    # repeat_experiment2(6)

    merge_exp1_exp2_results()
    visualize_exp1_exp2_results()
